---

# List of IP addresses or CIDR networks allowed to connect to HTTP or HTTPS
# service. It will be configured in iptables firewall via 'ferm' role. If there
# are no entries, nginx will accept connections from any IP address or network.
# If you have multiple web services on a host, you might want to control access
# using 'item.location_allow' option instead.
nginx_allow: []
nginx_group_allow: []
nginx_host_allow: []

# List of Debian packages installed by this role
nginx_base_packages: [ 'python-passlib' ]

# What type of nginx server to install (see 'nginx_flavor_package_map')
nginx_flavor: 'full'

# There are many versions of nginx server to choose from, but only 1 can be
# installed at a time. This is a list of APT packages which will be installed
# for a specific flavor.
nginx_flavor_package_map:

  # Default version from Debian
  'full': [ 'nginx-full' ]

  # nginx with support for Phusion Passenger compiled in. Requires external APT
  # repository. See https://phusionpassenger.com/ for more details.
  'passenger': [ 'nginx-extras', 'passenger', 'ruby' ]

  # Upstream version from http://nginx.org/ packaged for Debian
  'nginx.org': [ 'nginx' ]


# System user used by nginx
nginx_user: 'www-data'

# nginx base path for website directories
# It is exposed using Ansible local facts as 'ansible_local.nginx.www'
nginx_www: '/srv/www'

# Directory where ``nginx`` configuration is stored.
nginx_etc_path: '/etc/nginx'

# Directory where private files used by ``nginx`` are stored (for example
# htpasswd files).
nginx_private_path: '{{ nginx_etc_path + "/private" }}'

# Directory where runtime ``nginx`` files are stored.
nginx_run_path: '/run'

# Directory where ``nginx`` log files are stored.
nginx_log_path: '/var/log/nginx'

# Path of temporary client body files
nginx_client_body_temp_path: '/var/lib/nginx/body'

# Path of temporary FastCGI files
nginx_fastcgi_temp_path: '/var/lib/nginx/fastcgi'

# Path of temporary proxy files
nginx_proxy_temp_path: '/var/lib/nginx/proxy'

# Path of temporary sCGI files
nginx_scgi_temp_path: '/var/lib/nginx/scgi'

# Path of temporary iwsgi files
nginx_uwsgi_temp_path: '/var/lib/nginx/uwsgi'

# ---- Phusion Passenger support ----

# APT repository which will be added for Phusion Passenger support
nginx_passenger_phusion_repo: 'deb https://oss-binaries.phusionpassenger.com/apt/passenger {{ ansible_distribution_release }} main'

# Specify Phusion Passenger root paths manually (by default this variable is
# detected automatically at Ansible run time)
nginx_passenger_root: ''

# Specify path to Ruby executable for Phusion Passenger manually (by default
# this variable is detected automatically at Ansible run time)
nginx_passenger_ruby: ''

# Maximum number of Passenger processes
nginx_passenger_max_pool_size: '{{ (ansible_processor_cores | int * 5) }}'

# Additional Phusion Passenger global options
nginx_passenger_options: False

# Minimum Passenger instances per nginx server
nginx_passenger_default_min_instances: '{{ ansible_processor_cores }}'


# ---- Global server access and authentication ----

# List of IP addresses or CIDR networks which can access this server. If the
# list is empty, access is allowed from anywhere
nginx_http_allow: []

# Enable or disable HTTP Basic Auth for all nginx servers on this host.
# By default it depends on the contents of 'nginx_http_auth_users' variable, if
# the list is not empty, authorization is automatically enabled.
nginx_http_auth_basic: '{{ nginx_http_auth_users }}'

# Name of the htpasswd file in '/etc/nginx/private/' with list of global
# HTTP Basic Auth accounts
nginx_http_auth_basic_name: 'nginx_http'

# List of HTTP Basic Auth accounts which need to login before accessing this
# server. Passwords are generated automatically and stored in 'secret/'
# directory (see debops.secret role). If this list empty, access is not
# restricted.
nginx_http_auth_users: []

# Default http { } options
nginx_http_options: |
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 5m;
  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  types_hash_max_size 2048;
  gzip on;
  gzip_disable "msie6";

# If this variable is enabled, ``debops.nginx`` role will automatically add
# ``ipv6only=false`` to the default nginx server configuration. You can disable
# it and manage IPv4 and IPv6 listen directives yourself. nginx daemon needs to
# be restarted when this variable changes. More information can be found at:
#
# - https://github.com/debops/ansible-nginx/issues/86
#
# - http://stefanchrist.eu/blog/2015_01_21/Using%20ipv6only%20in%20Nginx.xhtml
#
nginx_manage_ipv6only: True

# Default listen port for HTTP connections.
nginx_listen_port: [ '[::]:80' ]

# Default listen port for HTTPS connections.
nginx_listen_ssl_port: [ '[::]:443' ]

# Default listen socket for HTTP connections.
nginx_listen_socket: []

# Default listen socket for HTTPS connections.
nginx_listen_ssl_socket: []

# List of IP addresses or CIDR subnets that the server should trust about real
# IP addresses of clients. If this list is specified, ``nginx`` will read the
# client IP address from the specified header. This is useful when ``nginx``
# server is used behind another proxy server (local or remote).
nginx_real_ip_from: []

# Specify the header used to lookup client IP addresses given by another
# server.
nginx_real_ip_header: 'X-Forwarded-For'

# If this variable is enabled, ``nginx`` will ignore client IP addresses that
# match the ones from list of trusted upstream servers. This is useful when the
# upstream server is also a proxy.
nginx_real_ip_recursive: False

nginx_default_keepalive_timeout: 60

# Enable or disable support for PKI/SSL/TLS in nginx
nginx_pki: '{{ (True if (ansible_local|d() and ansible_local.pki|d() and ansible_local.pki.enabled|d() | bool) else False) | bool }}'

# PKI base directory
nginx_pki_path: '{% if (ansible_local is defined and ansible_local.pki is defined) %}{{ ansible_local.pki.base_path }}{% else %}/etc/pki{% endif %}'

# PKI realm to use for nginx
nginx_pki_realm: '{% if (ansible_local is defined and ansible_local.pki is defined) %}{{ ansible_local.pki.realm }}{% else %}system{% endif %}'

# Path to default certificate, key and DH parameters file used by all nginx
# servers if not specified otherwise in server configuration. Relative to
# 'nginx_pki_realm' variable
nginx_pki_crt: 'default.crt'
nginx_pki_key: 'default.key'

# Path to the file with Diffie-Hellman parameters to use by the webserver.
nginx_ssl_dhparam: '{{ (ansible_local.dhparam[nginx_ssl_dhparam_set]
                        if (ansible_local|d() and ansible_local.dhparam|d() and
                            ansible_local.dhparam[nginx_ssl_dhparam_set]|d())
                        else "") }}'

# Name of the ``dhparam`` set to use.
nginx_ssl_dhparam_set: 'default'

# Default SSL cipher list. More information in vars/main.yml
nginx_default_ssl_ciphers: 'pfs'

# Default SSL ECDH curve used on servers, to see a list of supported curves, run:
#     openssl ecparam -list_curves
# See also: https://security.stackexchange.com/questions/31772/
nginx_default_ssl_curve: 'secp384r1'

# List of DNS servers used to resolve OCSP stapling. If it's empty, nginx role
# will try to use the nameservers from /etc/resolv.conf
# Currently only the first nameserver is used
nginx_ocsp_resolvers: []

# HTTP Strict-Transport-Security
# https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security
nginx_hsts_age: '15768000'
nginx_hsts_subdomains: True

# Specify HTTP server name which will be marked as default_server
nginx_default_name: ''

# Specify HTTPS server name which will be marked as default_server
nginx_default_ssl_name: ''

# Default server template used if no type is selected
nginx_default_type: 'default'

# Default server root
nginx_default_root: '{{ nginx_www + "/sites/default/public" }}'

# Create global webroot directories?
# Path: /srv/www/sites/*/public
nginx_webroot_create: True
nginx_webroot_owner: 'root'
nginx_webroot_group: 'root'
nginx_webroot_mode: '0755'

# Enable or disable support for Automated Certificate Management Environment
# (ACME) on all servers. This can be overriden per server using ``item.acme``
# variable.
nginx_acme: True

# Global directory where ACME challenges will be served from. It's not created
# by the role automatically and left to be managed by other Ansible roles.
nginx_acme_root: '{{ nginx_www + "/sites/acme/public" }}'

# Enable or disable custom ACME challenge server configuration. It will answer
# queries on a specified domain, from ``nginx_acme_root`` directory. It can be
# used for other things as well, for example to serve signed certificates to
# other hosts.
nginx_acme_server: False

# Specify the DNS domain to which ACME challenge queries will be redirected if
# they are not found on the host. The domain must exist in the DNS and a web
# server needs to be configured to answer the queries.
nginx_acme_domain: 'acme.{{ ansible_domain }}'

# List of IP addresses or CIDR ranges to allow access to the status page
nginx_status: []

# By default allow access to the status page from webserver itself
nginx_status_localhost: '{{ [ "127.0.0.1/32", "::1/128" ] + ansible_all_ipv4_addresses +
                            (ansible_all_ipv6_addresses |
                             difference(ansible_all_ipv6_addresses | ipaddr("link-local"))) }}'

# Name of the nginx status page location
nginx_status_name: '/nginx_status'

# Hash of symlinks to local server definitions stored in /etc/nginx/sites-local/
# Entries with empty values or False will be removed
# Symlinks will be created in /etc/nginx/sites-enabled/
nginx_local_servers: {}
  #'symlink': 'file'
  #'other-symlink.conf': 'sub/directory/file.conf'
  #'removed-file': False
  #'also-removed':
  #'symlink\ with\ spaces.conf': 'other-file.conf'

# Default "satisfy" mode used if not specified, choices: any, all
nginx_default_satisfy: 'any'

# Default HTTP Basic Auth "realm" presented to the user
nginx_default_auth_basic_realm: 'Access to this website is restricted'

# Path on the Ansible Controller used to lookup htpasswd passwords (see
# debops.secret role). You can change this to for example share a set of
# passwords between different hosts in case you use nginx in a HA setup
nginx_htpasswd_secret_path: '{{ secret + "/credentials/" + ansible_fqdn + "/nginx/htpasswd" }}'

# List of htpasswd files with user accounts managed by 'debops.nginx'. Example
# entries below
nginx_htpasswd: [ '{{ nginx_htpasswd_default }}' ]

  # Create specified user accounts
  #- name: 'server_domain'
  #  users: [ 'username1', 'username2@domain' ]

  # Delete specified user accounts
  #- name: 'server_domain'
  #  users: []
  #  state: 'absent'

  # Delete htpasswd file
  #- name: 'server_domain'
  #  users: []
  #  delete: True

# Default htpasswd file used for global HTTP Basic Auth accounts
nginx_htpasswd_default:
  name: '{{ nginx_http_auth_basic_name }}'
  users: '{{ nginx_http_auth_users }}'


# ---- nginx server access policy ----

# Using the dicts below you can define a named "access policy" consisting of a list
# of allowed hosts/CIDR networks and/or a name of a htpasswd file in
# '/etc/nginx/private/' with a list of user accounts to allow access. You can
# also define if any or all restrictions need to be met to gain access to
# a website. In website configuration dict, you can define an
# 'item.access_policy' key with a name of a particular policy. The nginx role
# will then use this information to generate a proper config file with given
# restrictions in place.

# List of IP addresses or CIDR networks which can access a particular site
nginx_access_policy_allow_map: {}

  #'my_policy': [ '192.0.2.0/24', '2002:db8::/64' ]

# Name of an HTTP Basic Auth htpasswd file in '/etc/nginx/private/' directory
nginx_access_policy_auth_basic_map: {}

  #'my_policy': 'htpasswd_file'

# Should all or any restrictions be met to gain access?
nginx_access_policy_satisfy_map: {}

  #'my_policy': 'any' or 'all'


# List of nginx map definitions
# Each map should be defined in it's own hash variable, similar to upstreams
# and servers
# http://nginx.org/en/docs/http/ngx_http_map_module.html
nginx_maps: []

# List of nginx upstream definitions
nginx_upstreams: [ '{{ nginx_upstream_php5 }}' ]

# Upstream for default php5-fpm configuration
nginx_upstream_php5:
  enabled: True
  name: 'php5_www-data'
  type: 'php5'
  php5: 'www-data'

# List of nginx server definitions
nginx_servers:
  - '{{ nginx_server_default }}'
  - '{{ nginx_server_localhost }}'
  - '{{ nginx_server_acme }}'

# Default nginx site
# List and description of available parameters can be found in nginx server
# templates: templates/etc/nginx/sites-available/*.conf.j2
nginx_server_default:
  enabled: True
  name: []
  default_index: '{{ nginx_default_index_html }}'

# Default nginx ``localhost`` server. It can be used to access ``nginx`` status
# page by other services.
nginx_server_localhost:
  enabled: True
  name: [ 'localhost', '127.0.0.1', '[::1]' ]
  acme: False
  ssl: False
  default_index: '{{ nginx_default_index_html }}'

# Custom server for ACME challenge queries
nginx_server_acme:
  enabled: '{{ nginx_acme_server | bool }}'
  delete: '{{ not nginx_acme_server | bool }}'
  name: [ '{{ nginx_acme_domain }}' ]
  filename: 'acme-challenge'
  root: '{{ nginx_acme_root }}'

# Contents of default 'index.html' page created automatically if
# 'item.default_index' is set in the server configuration
nginx_default_index_html: |
  <html>
    <head>
      <title>Welcome to nginx!</title>
    </head>
    <body>
      <h1>Your website is working!</h1>
    </body>
  </html>

# Checks for the existence of files in order, and returns the
# first file that is found for location /.
# http://wiki.nginx.org/NginxHttpCoreModule#try_files
nginx_default_try_files:
  - '$uri'
  - '$uri/'
  - '$uri.html'
  - '$uri.htm'
  - '/index.html'
  - '/index.htm'

# Custom nginx configuration in /etc/nginx/conf.d/
nginx_custom_config: []

  #- name: 'other_config'
  #  custom: |
  #    text block {
  #    }

# Enable execution of ``debops.nginx`` role dependencies. This variable can be
# used in playbooks to disable hardcoded dependencies during transition to
# playbook-based ones.
nginx_dependencies: True

# Configuration of custom APT preferences.
nginx_apt_preferences_dependent_list:

  - package: 'nginx nginx-*'
    backports: [ 'wheezy' ]
    reason: 'Support for SPDY, OCSP stapling'
    role: 'debops.nginx'
    when: '{{ (nginx_flavor == "full") | bool }}'
    delete: '{{ not (nginx_flavor == "full") | bool }}'

  - package: 'nginx nginx-*'
    pin: 'release o=Phusion'
    reason: 'Support for Phusion Passenger'
    priority: '600'
    suffix: '_passenger'
    role: 'debops.nginx'
    when: '{{ (nginx_flavor == "passenger") | bool }}'
    delete: '{{ not (nginx_flavor == "passenger") | bool }}'

# Configuration of the ``iptables`` firewall using ``ferm``.
nginx_ferm_dependent_rules:

  - type: 'accept'
    dport: [ 'http', 'https' ]
    saddr: '{{ nginx_allow + nginx_group_allow + nginx_host_allow }}'
    accept_any: True
    weight: '40'
    role: 'nginx'
    name: 'http_https'
    multiport: True

